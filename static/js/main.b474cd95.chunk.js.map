{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/Loader/Loader.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","components/hooks/useLocalStorage.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","Loader","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAdd","onClear","isDisabled","useState","quary","setQuary","hasError","setHasError","isLoading","setIsLoading","foundMovie","setFoundMovie","movieFind","useCallback","event","preventDefault","response","Title","Plot","Poster","imdbID","finally","handleQuary","currentTarget","value","onSubmit","htmlFor","type","id","placeholder","onChange","disabled","length","onClick","App","key","initialValue","localstore","localData","localStorage","getItem","JSON","parse","setMovies","allMovies","setAllMovies","prevstate","setItem","stringify","useLocalStorage","some","movieItem","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b474cd95.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=9841355e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useCallback, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (_:Movie) => void;\n  onClear: () => void;\n  isDisabled: boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd, onClear, isDisabled }) => {\n  const [quary, setQuary] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [foundMovie, setFoundMovie] = useState<Movie | null>(null);\n\n  const movieFind = useCallback((event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(quary).then(response => {\n      if ('Error' in response) {\n        setHasError(true);\n      } else {\n        setFoundMovie({\n          title: response.Title,\n          description: response.Plot,\n          imgUrl: response.Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : response.Poster,\n          imdbUrl: `https://imdb.com/title${response.imdbID}`,\n          imdbId: response.imdbID,\n        });\n      }\n    }).finally(() => setIsLoading(false));\n  }, [quary, getMovie]);\n\n  const handleQuary = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setHasError(false);\n      setQuary(event.currentTarget.value);\n    }, [quary],\n  );\n\n  const addToList = () => {\n    if (foundMovie) {\n      onAdd(foundMovie);\n    }\n\n    setFoundMovie(null);\n    setQuary('');\n    setHasError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={movieFind}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={quary}\n              onChange={handleQuary}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className=\"button is-light\"\n              disabled={quary.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              data-cy=\"addButton\"\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={(foundMovie === null)}\n              onClick={addToList}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n        <div className=\"control\">\n          <button\n            data-cy=\"addButton\"\n            type=\"button\"\n            className=\"button is-primary\"\n            onClick={onClear}\n            disabled={isDisabled}\n          >\n            Clear local storage\n          </button>\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {isLoading && <Loader />}\n        {foundMovie && (!isLoading && <MovieCard movie={foundMovie} />)}\n      </div>\n    </>\n  );\n};\n","import './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { useLocalStorage } from './components/hooks/useLocalStorage';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const { allMovies, setAllMovies } = useLocalStorage('movies', []);\n\n  const onAdd = (movie: Movie) => {\n    if (!(allMovies.some(movieItem => movieItem.title === movie.title))) {\n      setAllMovies(movie);\n    }\n  };\n\n  const onClear = () => {\n    localStorage.clear();\n  };\n\n  const isDisabled = allMovies.length === 0;\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={allMovies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={onAdd} onClear={onClear} isDisabled={isDisabled} />\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\n\nexport const useLocalStorage = (key: string, initialValue: []) => {\n  const localData = localStorage.getItem(key);\n  let localstore;\n\n  if (localData === null) {\n    localstore = initialValue;\n  } else {\n    localstore = JSON.parse(localData);\n  }\n\n  const [movies, setMovies] = useState<Movie[]>(localstore);\n\n  const save = (movie: Movie) => {\n    setMovies(prevstate => [...prevstate, movie]);\n    localStorage.setItem(key, JSON.stringify([...movies, movie]));\n  };\n\n  return { allMovies: movies, setAllMovies: save };\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}